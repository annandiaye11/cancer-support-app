"use client"

import { useEffect, useState } from 'react'

export function useUserId() {
  const [userId, setUserId] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    // R√©cup√©rer l'ID utilisateur depuis la session ou localStorage
    const fetchUserId = async () => {
      try {
        // Option 1: V√©rifier d'abord localStorage (pour √©viter de cr√©er un nouvel ID √† chaque fois)
        const storedUserId = localStorage.getItem('userId')
        
        if (storedUserId) {
          // Si on a d√©j√† un userId stock√©, l'utiliser IMM√âDIATEMENT
          console.log('üÜî userId trouv√© dans localStorage:', storedUserId)
          setUserId(storedUserId)
          setIsLoading(false)
          return // ‚ö†Ô∏è Important: sortir ici pour ne pas continuer
        }
        
        // Option 2: Essayer de r√©cup√©rer depuis la session NextAuth (seulement si pas de localStorage)
        console.log('üîç V√©rification de la session NextAuth...')
        const response = await fetch('/api/auth/session')
        if (response.ok) {
          const session = await response.json()
          if (session?.user?.id) {
            // Stocker l'ID de session dans localStorage pour la persistance
            console.log('‚úÖ userId trouv√© dans la session:', session.user.id)
            localStorage.setItem('userId', session.user.id)
            setUserId(session.user.id)
            setIsLoading(false)
            return
          }
        }
        
        // Option 3: Cr√©er un ID temporaire si aucun n'existe
        const tempUserId = `temp-${Date.now()}`
        localStorage.setItem('userId', tempUserId)
        setUserId(tempUserId)
        console.log('üÜî Nouvel ID utilisateur temporaire cr√©√©:', tempUserId)
        setIsLoading(false)
      } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'ID utilisateur:', error)
        
        // En cas d'erreur, v√©rifier localStorage avant de cr√©er un nouveau
        const existingUserId = localStorage.getItem('userId')
        if (existingUserId) {
          console.log('üÜî Utilisation de l\'userId existant apr√®s erreur:', existingUserId)
          setUserId(existingUserId)
        } else {
          const tempUserId = `temp-${Date.now()}`
          localStorage.setItem('userId', tempUserId)
          setUserId(tempUserId)
          console.log('üÜî ID utilisateur temporaire cr√©√© apr√®s erreur:', tempUserId)
        }
        setIsLoading(false)
      }
    }

    fetchUserId()
  }, [])

  return { userId, isLoading }
}
